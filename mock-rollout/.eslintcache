[{"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\index.tsx":"1","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\reportWebVitals.ts":"2","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\App.tsx":"3","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\HardwareContext.tsx":"4","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\pages\\dashboard\\Dashboard.tsx":"5","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\api-endpoint.ts":"6","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\hardware-types.ts":"7","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\InputTypes.ts":"8","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareList\\HardwareList.tsx":"9","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareItem\\HardwareItem.tsx":"10","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\HardwareInfo.ts":"11","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\CustomButton\\CustomButton.tsx":"12","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\InputText\\InputText.tsx":"13","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ApiContext.tsx":"14"},{"size":520,"mtime":1608623075817,"results":"15","hashOfConfig":"16"},{"size":440,"mtime":1608623075820,"results":"17","hashOfConfig":"16"},{"size":658,"mtime":1610038479399,"results":"18","hashOfConfig":"16"},{"size":3132,"mtime":1610038479404,"results":"19","hashOfConfig":"16"},{"size":538,"mtime":1610038479403,"results":"20","hashOfConfig":"16"},{"size":98,"mtime":1610038479400,"results":"21","hashOfConfig":"16"},{"size":208,"mtime":1610038479402,"results":"22","hashOfConfig":"16"},{"size":105,"mtime":1610036996122,"results":"23","hashOfConfig":"16"},{"size":1028,"mtime":1610037126915,"results":"24","hashOfConfig":"16"},{"size":7395,"mtime":1610037330399,"results":"25","hashOfConfig":"16"},{"size":301,"mtime":1610036992982,"results":"26","hashOfConfig":"16"},{"size":360,"mtime":1610036808607,"results":"27","hashOfConfig":"16"},{"size":1322,"mtime":1610036968518,"results":"28","hashOfConfig":"16"},{"size":1224,"mtime":1610037710471,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"p89oj1",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\index.tsx",[],["60","61"],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\reportWebVitals.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\App.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\HardwareContext.tsx",["62"],"import React, { createContext, FC, useEffect, useState, useReducer } from 'react';\r\nimport { IHardware } from '../model/HardwareModel';\r\nimport { HardwareService } from '../services/HardwareService';\r\n\r\ninterface IState {\r\n    hardwares?: IHardware[] | null | undefined;\r\n    error?: string;\r\n    updateHardware?: (id: number, hardware: IHardware) => void\r\n}\r\n\r\ninterface IHardwareProps  {\r\n    children: React.ReactNode;\r\n}\r\n\r\ntype IAction = \r\n    | { type: 'GET_SUCCESS', hardwares: IHardware[] | null, error: string }\r\n    | { type: 'GET_FAILED', hardwares: IHardware[] | null, error: string }\r\n    | { type: 'EDIT', hardwares: IHardware[] }\r\n\r\n\r\nconst initialHardwareState: IState = {\r\n    hardwares: [],\r\n    error: '',\r\n    updateHardware: (id: number, hardware: IHardware) => {}\r\n}\r\n\r\nexport const HardwareContext = createContext<{\r\n        state: IState, \r\n        dispatch: React.Dispatch<any>;}>\r\n    ({\r\n        state: initialHardwareState, \r\n        dispatch: () => null\r\n    });\r\n\r\nconst reducer = (state: IState, action: IAction): IState => {\r\n    switch (action.type) {\r\n        case 'GET_SUCCESS': \r\n            return { hardwares: action.hardwares, error: '' };\r\n        case 'GET_FAILED': \r\n            return { hardwares: [], error: action.error };\r\n        case 'EDIT':\r\n            return { hardwares: action.hardwares };\r\n         default: \r\n            return state\r\n    }\r\n}\r\n\r\nconst deleteHardware = (hardwares: IHardware[], id: number): IHardware[] => {\r\n    if (hardwares[id]) {\r\n        var index = hardwares.indexOf(hardwares[id])\r\n        hardwares.splice(index, 1);\r\n    }\r\n    return hardwares;\r\n}\r\n\r\nexport const HardwareContextProvider: FC<IHardwareProps> = props => {\r\n    const [ getHardwareState, setHardwareState ] = useState<IState>({ hardwares: [] });\r\n    const [ errorMessage, setErrorMessage ] = useState<IState>({ error: '' });\r\n    const [ state, dispatch ] = useReducer(reducer, initialHardwareState);\r\n    \r\n    const store = { state, dispatch };\r\n\r\n    async function handleGetData() {\r\n        await HardwareService.getHardware()\r\n            .then(response => {\r\n                setHardwareState({ hardwares: response });\r\n                dispatch({\r\n                    type: 'GET_SUCCESS', \r\n                    hardwares: getHardwareState.hardwares!,\r\n                    error: ''\r\n                });\r\n            })\r\n            .catch(error => {\r\n                setErrorMessage({ error: error.message })\r\n                dispatch({\r\n                    type: 'GET_FAILED',\r\n                    hardwares: [],\r\n                    error: errorMessage.error!\r\n                });\r\n            })\r\n    }\r\n\r\n    const handleEditHardware = (id: number, hardware: IHardware) => {\r\n        HardwareService.editHardware(id, hardware)\r\n            .then(response => {\r\n                setHardwareState({\r\n                    hardwares: [...deleteHardware(getHardwareState.hardwares!, id), hardware]\r\n                });\r\n                dispatch({\r\n                    type: 'EDIT', \r\n                    hardwares: getHardwareState.hardwares!\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n        })\r\n    }\r\n\r\n    state.updateHardware = handleEditHardware;\r\n\r\n    useEffect(() => {\r\n        handleGetData();\r\n    }, [getHardwareState, errorMessage]);\r\n\r\n    return (\r\n        <HardwareContext.Provider value={store}>\r\n            {props.children}\r\n        </HardwareContext.Provider>\r\n    )\r\n}","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\pages\\dashboard\\Dashboard.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\api-endpoint.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\hardware-types.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\InputTypes.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareList\\HardwareList.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareItem\\HardwareItem.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\HardwareInfo.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\CustomButton\\CustomButton.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\InputText\\InputText.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ApiContext.tsx",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":85,"column":8,"nodeType":"69","endLine":85,"endColumn":10,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getHardware'. Either include it or remove the dependency array.","ArrayExpression",["73"],"no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},"Update the dependencies array to be: [getHardware]",{"range":"76","text":"77"},[2829,2831],"[getHardware]"]