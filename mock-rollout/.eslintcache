[{"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\index.tsx":"1","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\reportWebVitals.ts":"2","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\App.tsx":"3","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\pages\\dashboard\\Dashboard.tsx":"4","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\api-endpoint.ts":"5","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\hardware-types.ts":"6","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\InputTypes.ts":"7","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareList\\HardwareList.tsx":"8","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareItem\\HardwareItem.tsx":"9","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\HardwareInfo.ts":"10","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\CustomButton\\CustomButton.tsx":"11","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\InputText\\InputText.tsx":"12","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ApiContext.tsx":"13","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\Spinner\\Spinner.tsx":"14","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\ErrorMessage\\ErrorMessage.tsx":"15","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Project\\ProjectItem\\ProjectItem.tsx":"16","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\LogoName\\LogoName.tsx":"17","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ProjectContext.tsx":"18","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\HardwareContext.tsx":"19"},{"size":520,"mtime":1610107094480,"results":"20","hashOfConfig":"21"},{"size":440,"mtime":1608623075820,"results":"22","hashOfConfig":"21"},{"size":540,"mtime":1610557702627,"results":"23","hashOfConfig":"21"},{"size":1005,"mtime":1610557702637,"results":"24","hashOfConfig":"21"},{"size":99,"mtime":1610096356300,"results":"25","hashOfConfig":"21"},{"size":208,"mtime":1610038534399,"results":"26","hashOfConfig":"21"},{"size":105,"mtime":1610036996122,"results":"27","hashOfConfig":"21"},{"size":1508,"mtime":1610557702632,"results":"28","hashOfConfig":"21"},{"size":8058,"mtime":1610557702628,"results":"29","hashOfConfig":"21"},{"size":301,"mtime":1610036992982,"results":"30","hashOfConfig":"21"},{"size":378,"mtime":1610106969147,"results":"31","hashOfConfig":"21"},{"size":1290,"mtime":1610106981813,"results":"32","hashOfConfig":"21"},{"size":1224,"mtime":1610552671081,"results":"33","hashOfConfig":"21"},{"size":141,"mtime":1610379684733,"results":"34","hashOfConfig":"21"},{"size":336,"mtime":1610372749959,"results":"35","hashOfConfig":"21"},{"size":2447,"mtime":1610557583871,"results":"36","hashOfConfig":"21"},{"size":417,"mtime":1610540671962,"results":"37","hashOfConfig":"21"},{"size":2194,"mtime":1610552662794,"results":"38","hashOfConfig":"21"},{"size":4167,"mtime":1610557702639,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"p89oj1",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\index.tsx",[],["81","82"],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\reportWebVitals.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\App.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\pages\\dashboard\\Dashboard.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\api-endpoint.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\hardware-types.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\InputTypes.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareList\\HardwareList.tsx",["83","84"],"import React, { FC, Fragment, useContext } from 'react';\r\nimport { HardwareItem } from '../HardwareItem/HardwareItem';\r\nimport { HardwareContext } from '../../../store/HardwareContext';\r\nimport { Spinner } from '../../UI/Spinner/Spinner';\r\nimport { ErrorMessage } from '../../UI/ErrorMessage/ErrorMessage';\r\nimport { IHardwareListProps } from './Types';\r\nimport './HardwareList.scss';\r\n\r\nexport const HardwareList: FC<IHardwareListProps> = (props: IHardwareListProps) => {\r\n    let hardwareListContent = null;\r\n\r\n    const { deleteHardware, hardwareState } = useContext(HardwareContext);\r\n\r\n    const deleteHardwareFromList = (serialNumber: string) => {\r\n        deleteHardware!(serialNumber);\r\n    };\r\n\r\n    if (!props.hardwareList.length) {\r\n        return <Fragment/>;\r\n    }\r\n\r\n    if (hardwareState.isLoading) {\r\n        hardwareListContent = <Spinner />;\r\n    } else {\r\n        hardwareListContent = props.hardwareList.map((item, index) => {\r\n            if (!item) {\r\n                return <Fragment key={index}/>;\r\n            }\r\n            return <HardwareItem hardware={item} key={index} deleteHardwareAction={deleteHardwareFromList}/>;\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className='hardware__container'>\r\n            {!hardwareState.error &&\r\n                hardwareListContent\r\n            }\r\n            {hardwareState.error &&\r\n                <ErrorMessage text={hardwareState.error} />\r\n            }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareItem\\HardwareItem.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\HardwareInfo.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\CustomButton\\CustomButton.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\InputText\\InputText.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ApiContext.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\Spinner\\Spinner.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\ErrorMessage\\ErrorMessage.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Project\\ProjectItem\\ProjectItem.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\LogoName\\LogoName.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ProjectContext.tsx",["85"],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\HardwareContext.tsx",["86"],"import React, { createContext, FC, useEffect, useReducer, useContext } from 'react';\r\nimport { APIContext } from './ApiContext';\r\nimport { IHardware } from '../models/HardwareModel';\r\nimport { \r\n    IHardwareContextState,\r\n    IHardwareContext,\r\n    IHardwareProviderState,\r\n    IAction\r\n} from './Types';\r\n\r\nconst initialHardwareState: IHardwareContextState = {\r\n    hardwares: [],\r\n    error: '',\r\n    isLoading: true\r\n};\r\n\r\nconst initialContextState: IHardwareContext = {\r\n    hardwareState: initialHardwareState,\r\n    dispatchHardwareState: undefined,\r\n    updateHardware: undefined,\r\n    deleteHardware: undefined\r\n};\r\n\r\nexport const HardwareContext = createContext<IHardwareContext>(initialContextState);\r\n\r\nconst reducer = (state: IHardwareContextState, action: IAction): IHardwareContextState => {\r\n    switch (action.type) {\r\n        case 'GET_SUCCESS': \r\n            return { hardwares: action.hardwares, error: '', isLoading: false };\r\n        case 'GET_FAILED':\r\n            return { hardwares: [], error: action.error, isLoading: false };\r\n        case 'EDIT_SUCCESS':\r\n            return { error: '', isLoading: false };\r\n        case 'EDIT_FAILED':\r\n            return { error: action.error, isLoading: false };\r\n        case 'DELETE_SUCCESS':\r\n            return { error: '', isLoading: false }\r\n        case 'DELETE_FAILED':\r\n            return { error: action.error, isLoading: false }\r\n         default: \r\n            return state\r\n    };\r\n};\r\n\r\nexport const HardwareContextProvider: FC<IHardwareProviderState> = (props: IHardwareProviderState) => {\r\n    const [ hardwareState, dispatchHardwareState ] = useReducer(reducer, initialHardwareState);\r\n\r\n    const apiContext = useContext(APIContext);\r\n\r\n    const getHardware = async () => {\r\n        hardwareState.isLoading = true;\r\n        try {\r\n            const response = await apiContext.callApi!('GET', '/products.json')\r\n            dispatchHardwareState({\r\n                type: 'GET_SUCCESS',\r\n                hardwares: response || [],\r\n                error: '',\r\n                isLoading: false\r\n            });\r\n        } catch (err) {\r\n            dispatchHardwareState({\r\n                type: 'GET_FAILED',\r\n                hardwares: [],\r\n                error: err.message,\r\n                isLoading: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const updateHardware = async (hardware: IHardware) => {\r\n        let hardwareId = hardwareState?.hardwares?.findIndex((item) => item?.SerialNumber === hardware.SerialNumber);\r\n        hardwareState.isLoading = true;\r\n        try {\r\n            await apiContext.callApi!('PUT', `/products/${hardwareId}.json`, hardware);\r\n            dispatchHardwareState({\r\n                type: 'EDIT_SUCCESS',\r\n                error: '',\r\n                isLoading: false\r\n            });\r\n            await getHardware();\r\n            \r\n        } catch (err) {\r\n            dispatchHardwareState({\r\n                type: 'EDIT_FAILED',\r\n                error: err.message,\r\n                isLoading: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const deleteHardware = async (serialNumber: string) => {\r\n        const hardwareId = hardwareState?.hardwares?.findIndex((item: IHardware, index: number) => item?.SerialNumber === serialNumber);\r\n        hardwareState.isLoading = true;\r\n        try {\r\n            await apiContext.callApi!('DELETE', `/products/${hardwareId}.json`);\r\n            dispatchHardwareState({\r\n                type: 'DELETE_SUCCESS',\r\n                error: '',\r\n                isLoading: false\r\n            });\r\n            await getHardware()\r\n\r\n        } catch(err) {\r\n            dispatchHardwareState({\r\n                type: 'DELETE_FAILED',\r\n                error: err.message,\r\n                isLoading: false\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getHardware();\r\n    }, []);\r\n\r\n    const store: IHardwareContext = { \r\n        hardwareState,\r\n        dispatchHardwareState,\r\n        updateHardware,\r\n        deleteHardware\r\n     };\r\n\r\n    return (\r\n        <HardwareContext.Provider value={store}>\r\n            {props.children}\r\n        </HardwareContext.Provider>\r\n    )\r\n}",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":1,"column":54,"nodeType":"93","messageId":"94","endLine":1,"endColumn":62},{"ruleId":"95","severity":1,"message":"96","line":17,"column":8,"nodeType":"97","endLine":17,"endColumn":29,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":61,"column":8,"nodeType":"97","endLine":61,"endColumn":10,"suggestions":"100"},{"ruleId":"95","severity":1,"message":"96","line":118,"column":8,"nodeType":"97","endLine":118,"endColumn":10,"suggestions":"101"},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getHardwaresByProjectName'. Either include it or remove the dependency array.","ArrayExpression",["104"],"React Hook useEffect has a missing dependency: 'getAllProjects'. Either include it or remove the dependency array.",["105"],["106"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [getHardwaresByProjectName, props.projectName]",{"range":"113","text":"114"},"Update the dependencies array to be: [getAllProjects]",{"range":"115","text":"116"},"Update the dependencies array to be: [getHardwaresByProjectName]",{"range":"117","text":"118"},[802,823],"[getHardwaresByProjectName, props.projectName]",[1945,1947],"[getAllProjects]",[4643,4645],"[getHardwaresByProjectName]"]