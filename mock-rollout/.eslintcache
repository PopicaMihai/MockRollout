[{"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\index.tsx":"1","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\reportWebVitals.ts":"2","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\App.tsx":"3","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\api-endpoint.ts":"4","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\hardware-types.ts":"5","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\InputTypes.ts":"6","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareList\\HardwareList.tsx":"7","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareItem\\HardwareItem.tsx":"8","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\HardwareInfo.ts":"9","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\CustomButton\\CustomButton.tsx":"10","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\InputText\\InputText.tsx":"11","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ApiContext.tsx":"12","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\HardwareContext.tsx":"13","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ProjectContext.tsx":"14","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\Spinner\\Spinner.tsx":"15","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\ErrorMessage\\ErrorMessage.tsx":"16","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\LogoName\\LogoName.tsx":"17","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\pages\\Project\\ProjectPage.tsx":"18"},{"size":523,"mtime":1610642273551,"results":"19","hashOfConfig":"20"},{"size":440,"mtime":1608623075820,"results":"21","hashOfConfig":"20"},{"size":542,"mtime":1610646081877,"results":"22","hashOfConfig":"20"},{"size":99,"mtime":1610561885482,"results":"23","hashOfConfig":"20"},{"size":208,"mtime":1610038534399,"results":"24","hashOfConfig":"20"},{"size":105,"mtime":1610036996122,"results":"25","hashOfConfig":"20"},{"size":1830,"mtime":1610643615574,"results":"26","hashOfConfig":"20"},{"size":8121,"mtime":1610646242255,"results":"27","hashOfConfig":"20"},{"size":301,"mtime":1610036992982,"results":"28","hashOfConfig":"20"},{"size":380,"mtime":1610642390620,"results":"29","hashOfConfig":"20"},{"size":1292,"mtime":1610642413272,"results":"30","hashOfConfig":"20"},{"size":1226,"mtime":1610642303547,"results":"31","hashOfConfig":"20"},{"size":5053,"mtime":1610643574297,"results":"32","hashOfConfig":"20"},{"size":2196,"mtime":1610646849603,"results":"33","hashOfConfig":"20"},{"size":141,"mtime":1610560144106,"results":"34","hashOfConfig":"20"},{"size":331,"mtime":1610642348803,"results":"35","hashOfConfig":"20"},{"size":409,"mtime":1610646398339,"results":"36","hashOfConfig":"20"},{"size":3312,"mtime":1610646985345,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"p89oj1",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\index.tsx",[],["77","78"],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\reportWebVitals.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\App.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\api-endpoint.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\hardware-types.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\InputTypes.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareList\\HardwareList.tsx",["79"],"import React, { FC, Fragment, useContext, useEffect } from 'react';\r\n\r\nimport { HardwareContext } from '../../../store/HardwareContext';\r\nimport { HardwareItem } from '../HardwareItem/HardwareItem';\r\nimport { Spinner } from '../../UI/Spinner/Spinner';\r\nimport { ErrorMessage } from '../../UI/ErrorMessage/ErrorMessage';\r\nimport { IHardware } from '../../../models/HardwareModel';\r\nimport { IHardwareListProps } from './Types';\r\nimport './HardwareList.scss';\r\n\r\nexport const HardwareList: FC<IHardwareListProps> = (props: IHardwareListProps) => {\r\n    let hardwareListContent = null;\r\n    const { hardwareState, getHardwaresByProjectName, deleteHardwareByProjectName } = useContext(HardwareContext);\r\n\r\n    useEffect(() => {\r\n        getHardwaresByProjectName(props.projectName);\r\n    }, [ props.projectName ]);\r\n\r\n    const deleteHardwareFromList = (serialNumber: string) => {\r\n        deleteHardwareByProjectName!(serialNumber, props.projectName);\r\n    };\r\n\r\n    if (!hardwareState.hardwares?.length) {\r\n        return <Fragment/>;\r\n    }\r\n\r\n    if (hardwareState.isLoading) {\r\n        hardwareListContent = <Spinner />;\r\n    } else {\r\n        hardwareListContent = hardwareState.hardwares!.map((item: IHardware, index: number) => {\r\n            if (!item) {\r\n                return <Fragment key={index}/>;\r\n            }\r\n            return <HardwareItem hardware={item} key={index} deleteHardwareAction={deleteHardwareFromList} projectName={props.projectName}/>;\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className='hardware__container'>\r\n            {!hardwareState.error &&\r\n                hardwareListContent\r\n            }\r\n            {hardwareState.error &&\r\n                <ErrorMessage text={hardwareState.error} />\r\n            }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareItem\\HardwareItem.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\HardwareInfo.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\CustomButton\\CustomButton.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\InputText\\InputText.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ApiContext.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\HardwareContext.tsx",["80"],"import React, { createContext, FC, useEffect, useReducer, useContext } from 'react';\r\n\r\nimport { IHardware } from '../models/HardwareModel';\r\nimport { APIContext } from './ApiContext';\r\nimport { ProjectContext } from './ProjectContext';\r\nimport { \r\n    IHardwareAction,\r\n    IHardwareContextState,\r\n    IHardwareContext,\r\n    IHardwareProviderState\r\n} from './Types';\r\n\r\nconst initialHardwareState: IHardwareContextState = {\r\n    hardwares: [],\r\n    error: '',\r\n    isLoading: true\r\n}\r\n\r\nconst initialContextState: IHardwareContext = {\r\n    hardwareState: initialHardwareState,\r\n    dispatchHardwareState: (action: IHardwareAction) => {},\r\n    getHardwaresByProjectName: (name: string) => {},\r\n};\r\n\r\nexport const HardwareContext = createContext<IHardwareContext>(initialContextState);\r\n\r\nconst reducer = (state: IHardwareContextState, action: IHardwareAction): IHardwareContextState => {\r\n    switch (action.type) {\r\n        case 'GET_HARDWARE_SUCCESS': \r\n            return { hardwares: action.hardwares, error: '', isLoading: false };\r\n        case 'GET_HARDWARE_FAILED':\r\n            return { hardwares: [], error: action.error, isLoading: false };\r\n        case 'EDIT_HARDWARE_SUCCESS':\r\n            return { error: '', isLoading: false };\r\n        case 'EDIT_HARDWARE_FAILED':\r\n            return { error: action.error, isLoading: false };\r\n        case 'DELETE_HARDWARE_SUCCESS':\r\n            return { error: '', isLoading: false }\r\n        case 'DELETE_HARDWARE_FAILED':\r\n            return { error: action.error, isLoading: false }\r\n         default: \r\n            return state\r\n    };\r\n};\r\n\r\nexport const HardwareContextProvider: FC<IHardwareProviderState> = (props: IHardwareProviderState) => {\r\n    const [ hardwareState, dispatchHardwareState ] = useReducer(reducer, initialHardwareState);\r\n\r\n    const apiContext = useContext(APIContext);\r\n    const projectContext = useContext(ProjectContext);\r\n\r\n    const getHardwaresByProjectName = async (name: string) => {\r\n        let projectId = projectContext.projectState.projects.findIndex(project => project.name === name);\r\n        hardwareState.isLoading = true;\r\n        try {\r\n            const response = await apiContext.callApi!('GET', `/projects/${projectId}/hardwares.json`);\r\n            dispatchHardwareState({\r\n                type: 'GET_HARDWARE_SUCCESS',\r\n                hardwares: response || [],\r\n                error: '',\r\n                isLoading: false\r\n            });\r\n        } catch (err) {\r\n            dispatchHardwareState({\r\n                type: 'GET_HARDWARE_FAILED',\r\n                hardwares: [],\r\n                error: err.message,\r\n                isLoading: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const updateHardwareByProjectName = async (hardware: IHardware, projectName: string) => {\r\n        let hardwareId = hardwareState.hardwares?.findIndex((item) => item?.SerialNumber === hardware.SerialNumber);\r\n        let projectId = projectContext.projectState.projects.findIndex(project => project.name === projectName);\r\n        hardwareState.isLoading = true;\r\n        try {\r\n            await apiContext.callApi!('PUT', `/projects/${projectId}/hardwares/${hardwareId}.json`, hardware);\r\n            dispatchHardwareState({\r\n                type: 'EDIT_HARDWARE_SUCCESS',\r\n                error: '',\r\n                isLoading: false\r\n            });\r\n            await getHardwaresByProjectName(projectName)\r\n            \r\n        } catch (err) {\r\n            dispatchHardwareState({\r\n                type: 'EDIT_HARDWARE_FAILED',\r\n                error: err.message,\r\n                isLoading: false\r\n            });\r\n        }\r\n        \r\n    };\r\n\r\n    const deleteHardwareByProjectName = async (serialNumber: string, projectName: string) => {\r\n        const hardwareId = hardwareState.hardwares?.findIndex((item: IHardware, index: number) => item?.SerialNumber === serialNumber);\r\n        let projectId = projectContext.projectState.projects.findIndex(project => project.name === projectName);\r\n        hardwareState.isLoading = true;\r\n        try {\r\n            await apiContext.callApi!('DELETE', `/projects/${projectId}/hardwares/${hardwareId}.json`);\r\n            dispatchHardwareState({\r\n                type: 'DELETE_HARDWARE_SUCCESS',\r\n                error: '',\r\n                isLoading: false\r\n            });\r\n            await getHardwaresByProjectName(projectName)\r\n\r\n        } catch(err) {\r\n            dispatchHardwareState({\r\n                type: 'DELETE_HARDWARE_FAILED',\r\n                error: err.message,\r\n                isLoading: false\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getHardwaresByProjectName('Mockup');\r\n    }, []);\r\n\r\n    const store: IHardwareContext = {\r\n        hardwareState,\r\n        dispatchHardwareState,\r\n        getHardwaresByProjectName,\r\n        updateHardwareByProjectName,\r\n        deleteHardwareByProjectName\r\n    };\r\n\r\n    return (\r\n        <HardwareContext.Provider value={store}>\r\n            {props.children}\r\n        </HardwareContext.Provider>\r\n    )\r\n}\r\n","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ProjectContext.tsx",["81"],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\Spinner\\Spinner.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\ErrorMessage\\ErrorMessage.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\LogoName\\LogoName.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\pages\\Project\\ProjectPage.tsx",["82"],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":17,"column":8,"nodeType":"89","endLine":17,"endColumn":29,"suggestions":"90"},{"ruleId":"87","severity":1,"message":"88","line":120,"column":8,"nodeType":"89","endLine":120,"endColumn":10,"suggestions":"91"},{"ruleId":"87","severity":1,"message":"92","line":62,"column":8,"nodeType":"89","endLine":62,"endColumn":10,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":1,"column":30,"nodeType":"96","messageId":"97","endLine":1,"endColumn":32},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getHardwaresByProjectName'. Either include it or remove the dependency array.","ArrayExpression",["100"],["101"],"React Hook useEffect has a missing dependency: 'getAllProjects'. Either include it or remove the dependency array.",["102"],"@typescript-eslint/no-unused-vars","'FC' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},"Update the dependencies array to be: [getHardwaresByProjectName, props.projectName]",{"range":"109","text":"110"},"Update the dependencies array to be: [getHardwaresByProjectName]",{"range":"111","text":"112"},"Update the dependencies array to be: [getAllProjects]",{"range":"113","text":"114"},[787,808],"[getHardwaresByProjectName, props.projectName]",[4688,4690],"[getHardwaresByProjectName]",[1947,1949],"[getAllProjects]"]