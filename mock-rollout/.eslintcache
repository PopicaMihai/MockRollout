[{"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\index.tsx":"1","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\reportWebVitals.ts":"2","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\App.tsx":"3","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\pages\\dashboard\\Dashboard.tsx":"4","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\api-endpoint.ts":"5","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\hardware-types.ts":"6","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\InputTypes.ts":"7","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareList\\HardwareList.tsx":"8","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareItem\\HardwareItem.tsx":"9","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\HardwareInfo.ts":"10","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\CustomButton\\CustomButton.tsx":"11","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\InputText\\InputText.tsx":"12","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ApiContext.tsx":"13","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\HardwareContext.tsx":"14","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ProjectContext.tsx":"15","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Project\\ProjectItem\\ProjectItem.tsx":"16","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\Spinner\\Spinner.tsx":"17","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\ErrorMessage\\ErrorMessage.tsx":"18","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\LogoName\\LogoName.tsx":"19"},{"size":520,"mtime":1610107094480,"results":"20","hashOfConfig":"21"},{"size":440,"mtime":1608623075820,"results":"22","hashOfConfig":"21"},{"size":536,"mtime":1610561974214,"results":"23","hashOfConfig":"21"},{"size":1029,"mtime":1610561827493,"results":"24","hashOfConfig":"21"},{"size":99,"mtime":1610561885482,"results":"25","hashOfConfig":"21"},{"size":208,"mtime":1610038534399,"results":"26","hashOfConfig":"21"},{"size":105,"mtime":1610036996122,"results":"27","hashOfConfig":"21"},{"size":1839,"mtime":1610561979412,"results":"28","hashOfConfig":"21"},{"size":8119,"mtime":1610561990489,"results":"29","hashOfConfig":"21"},{"size":301,"mtime":1610036992982,"results":"30","hashOfConfig":"21"},{"size":378,"mtime":1610106969147,"results":"31","hashOfConfig":"21"},{"size":1290,"mtime":1610106981813,"results":"32","hashOfConfig":"21"},{"size":1224,"mtime":1610561700335,"results":"33","hashOfConfig":"21"},{"size":5007,"mtime":1610561506365,"results":"34","hashOfConfig":"21"},{"size":2194,"mtime":1610561864342,"results":"35","hashOfConfig":"21"},{"size":2441,"mtime":1610560546974,"results":"36","hashOfConfig":"21"},{"size":141,"mtime":1610560144106,"results":"37","hashOfConfig":"21"},{"size":336,"mtime":1610560144099,"results":"38","hashOfConfig":"21"},{"size":416,"mtime":1610560144103,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"p89oj1",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\index.tsx",[],["80","81"],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\reportWebVitals.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\App.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\pages\\dashboard\\Dashboard.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\api-endpoint.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\constants\\hardware-types.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\InputTypes.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareList\\HardwareList.tsx",["82","83"],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Hardware\\HardwareItem\\HardwareItem.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\Enums\\HardwareInfo.ts",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\CustomButton\\CustomButton.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\InputText\\InputText.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ApiContext.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\HardwareContext.tsx",["84"],"import React, { createContext, FC, useEffect, useReducer, useContext } from 'react';\r\nimport { IHardware } from '../models/HardwareModel';\r\nimport { APIContext } from './ApiContext';\r\nimport { ProjectContext } from './ProjectContext';\r\nimport { \r\n    IHardwareAction,\r\n    IHardwareContextState,\r\n    IHardwareContext,\r\n    IHardwareProviderState\r\n} from './Types';\r\n\r\nconst initialHardwareState: IHardwareContextState = {\r\n    hardwares: [],\r\n    error: '',\r\n    isLoading: true\r\n}\r\n\r\nconst initialContextState: IHardwareContext = {\r\n    hardwareState: initialHardwareState,\r\n    dispatchHardwareState: undefined,\r\n    getHardwaresByProjectName: undefined,\r\n};\r\n\r\nexport const HardwareContext = createContext<IHardwareContext>(initialContextState);\r\n\r\nconst reducer = (state: IHardwareContextState, action: IHardwareAction): IHardwareContextState => {\r\n    switch (action.type) {\r\n        case 'GET_HARDWARE_SUCCESS': \r\n            return { hardwares: action.hardwares, error: '', isLoading: false };\r\n        case 'GET_HARDWARE_FAILED':\r\n            return { hardwares: [], error: action.error, isLoading: false };\r\n        case 'EDIT_HARDWARE_SUCCESS':\r\n            return { error: '', isLoading: false };\r\n        case 'EDIT_HARDWARE_FAILED':\r\n            return { error: action.error, isLoading: false };\r\n        case 'DELETE_HARDWARE_SUCCESS':\r\n            return { error: '', isLoading: false }\r\n        case 'DELETE_HARDWARE_FAILED':\r\n            return { error: action.error, isLoading: false }\r\n         default: \r\n            return state\r\n    };\r\n};\r\n\r\nexport const HardwareContextProvider: FC<IHardwareProviderState> = (props: IHardwareProviderState) => {\r\n    const [ hardwareState, dispatchHardwareState ] = useReducer(reducer, initialHardwareState);\r\n\r\n    const apiContext = useContext(APIContext);\r\n    const projectContext = useContext(ProjectContext);\r\n\r\n    const getHardwaresByProjectName = async (name: string) => {\r\n        let projectId = projectContext.projectState.projects.findIndex(project => project.name === name);\r\n        hardwareState.isLoading = true;\r\n        try {\r\n            const response = await apiContext.callApi!('GET', `/projects/${projectId}/hardwares.json`)\r\n            dispatchHardwareState({\r\n                type: 'GET_HARDWARE_SUCCESS',\r\n                hardwares: response || [],\r\n                error: '',\r\n                isLoading: false\r\n            });\r\n        } catch (err) {\r\n            dispatchHardwareState({\r\n                type: 'GET_HARDWARE_FAILED',\r\n                hardwares: [],\r\n                error: err.message,\r\n                isLoading: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const updateHardwareByProjectName = async (hardware: IHardware, projectName: string) => {\r\n        let hardwareId = hardwareState.hardwares?.findIndex((item) => item?.SerialNumber === hardware.SerialNumber);\r\n        let projectId = projectContext.projectState.projects.findIndex(project => project.name === projectName);\r\n        hardwareState.isLoading = true;\r\n        try {\r\n            await apiContext.callApi!('PUT', `/projects/${projectId}/hardwares/${hardwareId}.json`, hardware);\r\n            dispatchHardwareState({\r\n                type: 'EDIT_HARDWARE_SUCCESS',\r\n                error: '',\r\n                isLoading: false\r\n            });\r\n            await getHardwaresByProjectName(projectName)\r\n            \r\n        } catch (err) {\r\n            dispatchHardwareState({\r\n                type: 'EDIT_HARDWARE_FAILED',\r\n                error: err.message,\r\n                isLoading: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const deleteHardwareByProjectName = async (serialNumber: string, projectName: string) => {\r\n        const hardwareId = hardwareState.hardwares?.findIndex((item: IHardware, index: number) => item?.SerialNumber === serialNumber);\r\n        let projectId = projectContext.projectState.projects.findIndex(project => project.name === projectName);\r\n        hardwareState.isLoading = true;\r\n        try {\r\n            await apiContext.callApi!('DELETE', `/projects/${projectId}/hardwares/${hardwareId}.json`);\r\n            dispatchHardwareState({\r\n                type: 'DELETE_HARDWARE_SUCCESS',\r\n                error: '',\r\n                isLoading: false\r\n            });\r\n            await getHardwaresByProjectName(projectName)\r\n\r\n        } catch(err) {\r\n            dispatchHardwareState({\r\n                type: 'DELETE_HARDWARE_FAILED',\r\n                error: err.message,\r\n                isLoading: false\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getHardwaresByProjectName('Mockup');\r\n    }, []);\r\n\r\n    const store: IHardwareContext = {\r\n        hardwareState,\r\n        dispatchHardwareState,\r\n        getHardwaresByProjectName,\r\n        updateHardwareByProjectName,\r\n        deleteHardwareByProjectName\r\n    };\r\n\r\n    return (\r\n        <HardwareContext.Provider value={store}>\r\n            {props.children}\r\n        </HardwareContext.Provider>\r\n    )\r\n}\r\n","C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\store\\ProjectContext.tsx",["85"],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\Project\\ProjectItem\\ProjectItem.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\Spinner\\Spinner.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\ErrorMessage\\ErrorMessage.tsx",[],"C:\\Users\\mihai.pop\\Desktop\\New folder\\MockRollout\\mock-rollout\\src\\components\\UI\\LogoName\\LogoName.tsx",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":54,"nodeType":"92","messageId":"93","endLine":1,"endColumn":62},{"ruleId":"94","severity":1,"message":"95","line":16,"column":8,"nodeType":"96","endLine":16,"endColumn":29,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"95","line":118,"column":8,"nodeType":"96","endLine":118,"endColumn":10,"suggestions":"98"},{"ruleId":"94","severity":1,"message":"99","line":61,"column":8,"nodeType":"96","endLine":61,"endColumn":10,"suggestions":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getHardwaresByProjectName'. Either include it or remove the dependency array.","ArrayExpression",["103"],["104"],"React Hook useEffect has a missing dependency: 'getAllProjects'. Either include it or remove the dependency array.",["105"],"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [getHardwaresByProjectName, props.projectName]",{"range":"112","text":"113"},"Update the dependencies array to be: [getHardwaresByProjectName]",{"range":"114","text":"115"},"Update the dependencies array to be: [getAllProjects]",{"range":"116","text":"117"},[796,817],"[getHardwaresByProjectName, props.projectName]",[4642,4644],"[getHardwaresByProjectName]",[1945,1947],"[getAllProjects]"]